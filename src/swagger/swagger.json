{
  "openapi": "3.0.0",
  "info": {
    "title": "Verbup API",
    "version": "1.0.0",
    "description": "API documentation for Verbup"
  },
  "servers": [
    {
      "url": "http://localhost:8000/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication & authorization endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Feedbacks",
      "description": "Feedback management endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "description": "Register a new user with email and password.   Upon successful registration, the user is automatically logged in.   Access Token is returned in the response body.   Refresh Token is set in an HttpOnly cookie via the `Set Cookie` header.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "test@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful registration",
            "headers": {
              "Set Cookie": {
                "description": "HttpOnly cookie with Refresh Token",
                "schema": {
                  "type": "string",
                  "example": "Refresh Token - eyJhbGciJIUzI1NiIsInR5iOi..."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "description": "Access Token return in JSON, Refresh Token saves in HttpOnly Cookie",
        "parameters": [
          {
            "name": "Get Cookie",
            "in": "header",
            "required": false,
            "description": "HttpOnly cookie containing the Refresh Token",
            "schema": {
              "type": "string",
              "example": "Refresh Token - eyJhbGciJIUzI1NiIsInR5iOi..."
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "test@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "headers": {
              "Set Cookie": {
                "description": "HttpOnly cookie containing the Refresh Token",
                "schema": {
                  "type": "string",
                  "example": "Refresh Token - eyJhbGciJIUzI1NiIsInR5iOi..."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6Ikp..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh access token",
        "description": "Refresh the access token using the refresh token stored in an HttpOnly cookie.   The new access token is returned in the response body, and the refresh token is updated in the cookie.\n",
        "parameters": [
          {
            "name": "Get Cookie",
            "in": "header",
            "required": true,
            "description": "HttpOnly cookie containing the Refresh Token",
            "schema": {
              "type": "string",
              "example": "Refresh Token - eyJhbGciJIUzI1NiIsInR5iOi..."
            }
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Set Cookie": {
                "description": "HttpOnly cookie containing the Refresh Token",
                "schema": {
                  "type": "string",
                  "example": "Refresh Token - eyJhbGciJIUzI1NiIsInR5iOi..."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6Ikp..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user",
        "description": "Returns the user associated with the provided Bearer token.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing Bearer token",
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Not found - User not found",
            "$ref": "#/components/responses/404"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "Eugene"
                  },
                  "avatar": {
                    "type": "string",
                    "example": "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing Bearer token",
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Not found - User not found",
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing Bearer token",
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Not found - User not found",
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/feedback": {
      "post": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "Create new feedback",
        "description": "If user registered, automatically add user ID from JWT token to feedback",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "comment",
                  "rating"
                ],
                "properties": {
                  "comment": {
                    "type": "string",
                    "example": "This is a feedback comment."
                  },
                  "rating": {
                    "type": "integer",
                    "example": 5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "feedback": {
                      "$ref": "#/components/schemas/Feedback"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, comment and rating are required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Comment and rating are required"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "Eugene"
          },
          "email": {
            "type": "string",
            "example": "test@gmail.com"
          },
          "avatar": {
            "type": "string",
            "nullable": true,
            "example": "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
          },
          "created_at": {
            "type": "string",
            "example": "2025-06-06T18:50:11.640Z"
          },
          "updated_at": {
            "type": "string",
            "example": "2025-06-06T18:50:11.640Z"
          }
        }
      },
      "Feedback": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 8
          },
          "comment": {
            "type": "string",
            "example": "This is a feedback comment."
          },
          "rating": {
            "type": "integer",
            "example": 5
          },
          "user_id": {
            "type": "number",
            "example": "10 (or null if user is not registered)",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "example": "2025-06-06T18:50:11.640Z"
          },
          "updated_at": {
            "type": "string",
            "example": "2025-06-06T18:50:11.640Z"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Email and password are required"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "User with this email already exists"
                }
              }
            }
          }
        }
      }
    }
  }
}